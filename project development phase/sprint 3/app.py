{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32e4299b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import division, print_function\n",
    "\n",
    "import os\n",
    "\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from flask import Flask, redirect, render_template, request\n",
    "from keras.applications.inception_v3 import preprocess_input\n",
    "from keras.models import model_from_json\n",
    "from werkzeug.utils import secure_filename\n",
    "\n",
    "global graph\n",
    "graph=tf.compat.v1.get_default_graph()\n",
    "#this list is used to log the predictions in the server console\n",
    "predictions = [\"Corpse Flower\", \n",
    "               \"Great Indian Bustard\", \n",
    "               \"Lady's slipper orchid\", \n",
    "               \"Pangolin\", \n",
    "               \"Spoon Billed Sandpiper\", \n",
    "               \"Seneca White Deer\"\n",
    "              ]\n",
    "#this list contains the link to the predicted species              \n",
    "found = [\n",
    "        \"https://en.wikipedia.org/wiki/Amorphophallus_titanum\",\n",
    "        \"https://en.wikipedia.org/wiki/Great_Indian_bustard\",\n",
    "        \"https://en.wikipedia.org/wiki/Cypripedioideae\",\n",
    "        \"https://en.wikipedia.org/wiki/Pangolin\",\n",
    "        \"https://en.wikipedia.org/wiki/Spoon-billed_sandpiper\",\n",
    "        \"https://en.wikipedia.org/wiki/Seneca_white_deer\",\n",
    "        ]\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/', methods=['GET'])\n",
    "def index():\n",
    "    # Home Page\n",
    "    return render_template(\"index.html\")\n",
    "@app.route('/predict', methods=['GET', 'POST'])\n",
    "def upload():\n",
    "    if request.method == 'GET':\n",
    "        return (\"<h6 style=\\\"font-face:\\\"Courier New\\\";\\\">No GET request herd.....</h6 >\")\n",
    "    if request.method == 'POST':\n",
    "        # Fetching the uploaded image from the post request using the id 'uploadedimg'\n",
    "        f = request.files['uploadedimg']\n",
    "        basepath = os.path.dirname(__file__)\n",
    "        #Securing the file by creating a path in local storage\n",
    "        file_path = os.path.join(basepath, 'uploads', secure_filename(f.filename))\n",
    "        #Saving the uploaded image locally\n",
    "        f.save(file_path)\n",
    "        #loading the locally saved image \n",
    "        img = tf.keras.utils.load_img(file_path, target_size=(224, 224))\n",
    "        #converting the loaded image to image array \n",
    "        x = tf.keras.utils.img_to_array(img)\n",
    "        x = preprocess_input(x)\n",
    "        # Converting the preprecessed image to numpy array\n",
    "        inp = np.array([x])\n",
    "        with graph.as_default():\n",
    "            #loading the saved model from training\n",
    "            json_file = open('C:\\Users\\jkeah\\OneDrive\\Desktop\\ibm\\project development phase\\sprint 2\\DigitalNaturalist.json')\n",
    "            loaded_model_json = json_file.read()\n",
    "            json_file.close()\n",
    "            loaded_model = model_from_json(loaded_model_json)\n",
    "            #adding weights to the trained model\n",
    "            loaded_model.load_weights(\"C:\\Users\\jkeah\\OneDrive\\Desktop\\ibm\\project development phase\\sprint 2\\Digital Naturalist Dataset.h5\")\n",
    "            #predecting the image\n",
    "            preds =  np.argmax(loaded_model.predict(inp),axis=1)\n",
    "            #logs are printed to the console \n",
    "            print(\"Predicted the Species \" + str(predictions[preds[0]]))\n",
    "        text = found[preds[0]]\n",
    "        return redirect(text)\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    #Threads enabled so multiple users can request simultaneously\n",
    "    #debug is turned off, turn on during development to debug the errors\n",
    "    #application is binded to port 8000\n",
    "    app.run(threaded = True,debug=True,port=\"8000\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
